---
title: "Hello, Quarto"
format: html
echo: false
message: false
warning: false
---

```{python}
import polars as pl
import pandas as pd
import numpy as np
from lifelines import AalenJohansenFitter, CoxPHFitter, WeibullAFTFitter

df_time_to_cancer_dx = pd.read_csv(
    "https://raw.githubusercontent.com/ddsjoberg/dca-tutorial/main/data/df_time_to_cancer_dx.csv"
)
```


```{python}

import numpy as np
from itertools import product
import itertools
from rtichoke.helpers.sandbox_observable_helpers import *
import polars as pl
print("Polars version:", pl.__version__)

import pandas as pd
import pickle  

cph = CoxPHFitter()
thin_model = CoxPHFitter()
aft_model = WeibullAFTFitter()

cox_formula = "age + famhistory + marker"
thin_formula = "age + marker"
aft_formula = "age + marker"

cph.fit(
    df_time_to_cancer_dx,
    duration_col="ttcancer",
    event_col="cancer",
    formula=cox_formula,
)

thin_model.fit(
    df_time_to_cancer_dx,
    duration_col="ttcancer",
    event_col="cancer",
    formula=thin_formula,
)

aft_model.fit(
    df_time_to_cancer_dx,
    duration_col="ttcancer",
    event_col="cancer",
    formula=aft_formula,
)



cph_pred_vals = (1 - cph.predict_survival_function(df_time_to_cancer_dx[['age', 'famhistory', 'marker']], times=[1.5])).iloc[0, :].values

thin_pred_vals = (1 - thin_model.predict_survival_function(df_time_to_cancer_dx[['age', 'famhistory', 'marker']], times=[1.5])).iloc[0, :].values

aft_pred_vals = (1 - aft_model.predict_survival_function(df_time_to_cancer_dx[['age', 'famhistory', 'marker']], times=[1.5])).iloc[0, :].values

probs_dict = {"full": cph_pred_vals, "thin": thin_pred_vals, "aft": aft_pred_vals}

reals_mapping = {"censor": 0, "diagnosed with cancer": 1, "dead other causes": 2}

reals_dict = df_time_to_cancer_dx["cancer_cr"].map(reals_mapping)

times_dict = df_time_to_cancer_dx["ttcancer"]

```


## polars

```{python}



fixed_time_horizons = [1.0, 3.0, 5.0]
stratified_by = ["probability_threshold", "ppcr"]
by=0.1

aj_data_combinations = create_aj_data_combinations_polars(list(probs_dict.keys()), fixed_time_horizons, stratified_by, by)



print(aj_data_combinations['strata'])
```

# try polars

## create list data to adjust polars

```{python}

from rtichoke.helpers.sandbox_observable_helpers import *

list_data_to_adjust_polars = create_list_data_to_adjust_polars(
  probs_dict, reals_dict, times_dict, stratified_by=stratified_by, by=by
)



```


## create adjusted data list polars

### New extract aj estimate by assumptions polars

## Create aj_estimates_data

```{python}

fixed_time_horizons = [1.0, 3.0, 5.0]

assumption_sets = [
    {
        "censoring_assumption": "adjusted",
        "competing_assumption": "adjusted_as_negative",
    },
    {
        "censoring_assumption": "excluded",
        "competing_assumption": "adjusted_as_negative",
    },
    {
        "censoring_assumption": "adjusted",
        "competing_assumption": "adjusted_as_censored",
    },
    {
        "censoring_assumption": "excluded",
        "competing_assumption": "adjusted_as_censored",
    },
    {"censoring_assumption": "adjusted", "competing_assumption": "excluded"},
    {"censoring_assumption": "excluded", "competing_assumption": "excluded"},
]

# aj_estimates_data = extract_aj_estimate_by_assumptions(
#     example_polars_df,
#     assumption_sets=assumption_sets,
#     fixed_time_horizons=fixed_time_horizons,
# )


aj_estimates_data = create_adjusted_data(
    list_data_to_adjust_polars,
    assumption_sets=assumption_sets,
    fixed_time_horizons=fixed_time_horizons
)

```


### Check strata values

```{python}

aj_data_combinations.select(pl.col('strata')).with_columns(
  pl.col("strata").cast(str)
).join(
  aj_estimates_data.select(pl.col('strata')).unique(),
  on = 'strata'
)
  
result = aj_data_combinations.select(pl.col('strata')).with_columns(
  pl.col("strata").cast(str)
).with_columns(
    pl.col("strata").is_in(aj_estimates_data["strata"]).alias("is_in_df2")
)

print(result)


result = aj_estimates_data.select(pl.col('strata')).with_columns(
  pl.col("strata")
).with_columns(
    pl.col("strata").is_in(aj_data_combinations["strata"].cast(str)).alias("is_in_df2")
)

print(result.filter(pl.col("is_in_df2") == False))


```

### Cast varibles with hacks

```{python}

final_adjusted_data_polars = cast_and_join_adjusted_data(aj_data_combinations, aj_estimates_data)

```


```{python}

import pandas as pd


reference_groups = list(probs_dict.keys())


ojs_define(reference_groups_data = reference_groups)

ojs_define(data = final_adjusted_data_polars.to_pandas())

```

## Observable stuff

```{ojs}
//| panel: input

viewof time_horizon = Inputs.range(
  [1, 5], 
  {value: 3, step: 2, label: "Time Horizon:"}
)

viewof reference_group = Inputs.radio(
  reference_groups_data, {label: "Reference Group"}, {value: 'thin'}
)

viewof stratified_by = Inputs.radio(
  ["probability_threshold", "ppcr"], {value: "probability_threshold", label: "Stratified By"}
)

viewof censored_assumption = Inputs.radio(
  ["excluded", "adjusted"], {value: "excluded", label: "Censored Assumption"}
)

viewof competing_assumption = Inputs.radio(
  ["excluded", "adjusted_as_negative", "adjusted_as_censored"], {value: "excluded", label: "Competing Assumption"}
)

```

```{ojs}

//cumulative_aj_data_filtered = transpose(cumulative_aj_data).filter(function(subset) {
//
//  return time_horizon == subset.fixed_time_horizon &&
//         censored_assumption == subset.censored_assumption &&
//         competing_assumption == subset.competing_assumption &&
//         stratified_by == subset.stratified_by && 
//         reference_group === subset.reference_group;
//})

filtered = transpose(data).filter(function(subset) {

  return time_horizon == subset.fixed_time_horizon &&
         censored_assumption == subset.censoring_assumption &&
         competing_assumption == subset.competing_assumption &&
         stratified_by === subset.stratified_by && 
         reference_group === subset.reference_group;
})

filtered


```

```{ojs}

  
Plot.plot({
  marks: [
    Plot.barY(filtered, { 
      x: "strata", 
      y: "reals_estimate", 
      fill: "reals_labels", 
      tip: true 
    })
  ],
  color: {
    domain: ["real_positives", "real_competing", "real_negatives", "real_censored"], 
    range: ["#009e73", "#9DB4C0", "#FAC8CD", "#E3F09B"],
    legend: true
  },
  style: {
    background: "none"
  }
})

```

```{python}

# combined_adjusted_data.dropna(subset=['reals_estimate'])
# # 

# Perform left join between aj_data_combinations and final_adjusted_data on 'strata' and 'reals_estimate'
# only when stratified_by == 'probability_threshold' for aj_data_combinations

# aj_data_combinations_prob_threshold = aj_data_combinations[aj_data_combinations['stratified_by'] == 'probability_threshold']

# # Convert 'strata' columns to strings
# aj_data_combinations_prob_threshold['strata'] = aj_data_combinations_prob_threshold['strata'].astype(str)
# final_adjusted_data['strata'] = final_adjusted_data['strata'].astype(str)

# combined_adjusted_data = aj_data_combinations_prob_threshold.merge(
#     final_adjusted_data[['strata', 'reals', 'reals_estimate']],
#     on=['strata', 'reals'],
#     how='left'
# )


# aj_data_combinations_prob_threshold[['strata']]
# final_adjusted_data[['strata']]
```
