---
title: "Hello, Quarto"
format: html
echo: false
message: false
warning: false
---


```{python}

from rtichoke.helpers.sandbox_observable_helpers import create_aj_data_combinations

create_aj_data_combinations
```


Here is a Python code cell:

```{python}
from lifelines import AalenJohansenFitter
import numpy as np
from itertools import product
import itertools
from rtichoke.helpers.sandbox_observable_helpers import *
from lifelines import CoxPHFitter
from lifelines import WeibullAFTFitter

import pandas as pd



df_time_to_cancer_dx = \
    pd.read_csv(
        "https://raw.githubusercontent.com/ddsjoberg/dca-tutorial/main/data/df_time_to_cancer_dx.csv"
    )


# Initialize models
cox_model = CoxPHFitter()
thin_model = CoxPHFitter()
aft_model = WeibullAFTFitter()

# Define formulas for each model
cox_formula = 'age + famhistory + marker'
thin_formula = 'age + marker'
aft_formula = 'age + marker'

# Fit the models
cox_model.fit(df_time_to_cancer_dx, duration_col='ttcancer', event_col='cancer', formula=cox_formula)
thin_model.fit(df_time_to_cancer_dx, duration_col='ttcancer', event_col='cancer', formula=thin_formula)
aft_model.fit(df_time_to_cancer_dx, duration_col='ttcancer', event_col='cancer', formula=aft_formula)


reals_mapping = {
    "censor": 0,
    "diagnosed with cancer": 1,
    "dead other causes": 2
}

df_time_to_cancer_dx['reals'] = df_time_to_cancer_dx['cancer_cr'].map(reals_mapping)

# Predict risks at time 1.5
new_data = df_time_to_cancer_dx.copy()
new_data['ttcancer'] = 1.5

# Ensure preds_aft is in the same format as pred_1_5 and pred_thin
preds_aft = 1 - np.exp(-aft_model.predict_expectation(new_data))
print(f"preds_aft: type={type(preds_aft)}, dimensions={preds_aft.ndim if hasattr(preds_aft, 'ndim') else 'N/A'}")

# Predict risks at time 1.5
pred_1_5 = 1 - np.exp(-cox_model.predict_expectation(new_data))
print(f"pred_1_5: type={type(pred_1_5)}, dimensions={pred_1_5.ndim if hasattr(pred_1_5, 'ndim') else 'N/A'}")

pred_thin = 1 - np.exp(-thin_model.predict_expectation(new_data))
print(f"pred_thin: type={type(pred_thin)}, dimensions={pred_thin.ndim if hasattr(pred_thin, 'ndim') else 'N/A'}")

print('preds_aft')
print(preds_aft)

print('pred_thin')
print(pred_thin)

```


```{python}
# Store probabilities
probs_cox = {
    "thin": pred_thin,
    "full": pred_1_5,
    "aft": preds_aft
}
# Create Aalen-Johansen data combinations
fixed_time_horizons = [1, 3, 5]
stratified_by = ["probability_threshold", "ppcr"]

# Placeholder for create_aj_data_combinations
aj_data_combinations = create_aj_data_combinations(list(probs_cox.keys()), fixed_time_horizons, stratified_by, 0.1)

```



```{python}
# Create reference groups
data_to_adjust = pd.DataFrame({
    "reference_group": ["thin"] * len(probs_cox["thin"]) + ["aft"] * len(probs_cox["thin"]) + ["full"] * len(probs_cox["thin"]),
    "probs": np.concatenate([probs_cox["thin"], probs_cox["aft"], probs_cox["full"]]),
    "reals": np.concatenate([df_time_to_cancer_dx['reals'], df_time_to_cancer_dx['reals'], df_time_to_cancer_dx['reals']]),
    "times": np.concatenate([df_time_to_cancer_dx['ttcancer'], df_time_to_cancer_dx['ttcancer'], df_time_to_cancer_dx['ttcancer']])
})

# # Placeholder for add_cutoff_strata function
data_to_adjust = add_cutoff_strata(data_to_adjust, by=0.1)

```



```{python}
data_to_adjust = pivot_longer_strata(data_to_adjust)

data_to_adjust["reals"] = data_to_adjust["reals"].replace({
    0: "real_negatives",
    2: "real_competing",
    1: "real_positives"
})


data_to_adjust["reals"] = pd.Categorical(data_to_adjust["reals"], categories=["real_negatives", "real_competing", "real_positives"], ordered=True)

# Splitting data by reference group
list_data_to_adjust = {k: v for k, v in data_to_adjust.groupby("reference_group")}

list_data_to_adjust['aft']

# # Define assumption sets
assumption_sets = [
    {"competing": "excluded", "censored": "excluded"},
    {"competing": "adjusted_as_negative", "censored": "adjusted"},
    {"competing": "adjusted_as_censored", "censored": "adjusted"},
    {"competing": "excluded", "censored": "adjusted"},
    {"competing": "adjusted_as_negative", "censored": "excluded"}
]

```


```{python}

list_data_to_adjust

# Adjust data based on assumptions
adjusted_data_list = []
for reference_group, group_data in list_data_to_adjust.items():
    for assumptions in assumption_sets:
        adjusted_data = extract_aj_estimate_by_assumptions(
            group_data,
            fixed_time_horizons=fixed_time_horizons,
            censoring_assumption=assumptions["censored"],
            competing_assumption=assumptions["competing"]
        )
        adjusted_data["reference_group"] = reference_group
        adjusted_data_list.append(adjusted_data)


# Combine all adjusted data
final_adjusted_data = pd.concat(adjusted_data_list, ignore_index=True)

aj_data_combinations['strata'] = aj_data_combinations['strata'].astype(str)

final_adjusted_data['strata'] = final_adjusted_data['strata'].astype(str)

aj_data_combinations['reals'] = aj_data_combinations['reals'].astype(str)

final_adjusted_data['reals'] = final_adjusted_data['reals'].astype(str)

categories = ["real_negatives", "real_positives", "real_competing", "real_censored"]
aj_data_combinations['reals'] = pd.Categorical(aj_data_combinations['reals'], categories=categories, ordered=True)
final_adjusted_data['reals'] = pd.Categorical(final_adjusted_data['reals'], categories=categories, ordered=True)

combined_adjusted_data = aj_data_combinations.merge(final_adjusted_data, on=["reference_group", "fixed_time_horizon", "censoring_assumption", "competing_assumption", "reals", "strata"], how='left')

```

```{python}

ojs_define(reference_groups_data = ["thin", "full", "aft"])

ojs_define(data = combined_adjusted_data)

```

```{ojs}

//| panel: input

viewof time_horizon = Inputs.range(
  [1, 5], 
  {value: 3, step: 2, label: "Time Horizon:"}
)

viewof reference_group = Inputs.radio(
  reference_groups_data, {label: "Reference Group"}, {value: 'thin'}
)

viewof stratified_by = Inputs.radio(
  ["probability_threshold", "ppcr"], {value: "probability_threshold", label: "Stratified By"}
)

viewof censored_assumption = Inputs.radio(
  ["excluded", "adjusted"], {value: "excluded", label: "Censored Assumption"}
)

viewof competing_assumption = Inputs.radio(
  ["excluded", "adjusted_as_negative", "adjusted_as_censored", "reals"], {value: "excluded", label: "Competing Assumption"}
)

```

```{ojs}

//cumulative_aj_data_filtered = transpose(cumulative_aj_data).filter(function(subset) {
//
//  return time_horizon == subset.fixed_time_horizon &&
//         censored_assumption == subset.censored_assumption &&
//         competing_assumption == subset.competing_assumption &&
//         stratified_by == subset.stratified_by && 
//         reference_group === subset.reference_group;
//})

filtered = transpose(data).filter(function(subset) {

  return time_horizon == subset.fixed_time_horizon &&
         censored_assumption == subset.censoring_assumption &&
         competing_assumption == subset.competing_assumption &&
         stratified_by === subset.stratified_by && 
         reference_group === subset.reference_group;
})

filtered


```

```{ojs}

  
Plot.plot({
  marks: [
    Plot.barY(filtered, { 
      x: "strata", 
      y: "reals_estimate", 
      fill: "reals", 
      tip: true 
    })
  ],
  color: {
    domain: ["real_positives", "real_competing", "real_negatives", "real_censored"], 
    range: ["#009e73", "#9DB4C0", "#FAC8CD", "#E3F09B"],
    legend: true
  }
})

``` 

```{python}

# combined_adjusted_data.dropna(subset=['reals_estimate'])
# # 

# Perform left join between aj_data_combinations and final_adjusted_data on 'strata' and 'reals_estimate'
# only when stratified_by == 'probability_threshold' for aj_data_combinations

aj_data_combinations_prob_threshold = aj_data_combinations[aj_data_combinations['stratified_by'] == 'probability_threshold']

# Convert 'strata' columns to strings
aj_data_combinations_prob_threshold['strata'] = aj_data_combinations_prob_threshold['strata'].astype(str)
final_adjusted_data['strata'] = final_adjusted_data['strata'].astype(str)

combined_adjusted_data = aj_data_combinations_prob_threshold.merge(
    final_adjusted_data[['strata', 'reals', 'reals_estimate']],
    on=['strata', 'reals'],
    how='left'
)


aj_data_combinations_prob_threshold[['strata']]
final_adjusted_data[['strata']]
```