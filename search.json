[
  {
    "objectID": "walkthrough_aj_estimate.html",
    "href": "walkthrough_aj_estimate.html",
    "title": "Hello, Quarto",
    "section": "",
    "text": "viewof time_horizon = Inputs.range(\n  [1, 5], \n  {value: 3, step: 2, label: \"Time Horizon:\"}\n)\n\nviewof reference_group = Inputs.radio(\n  reference_groups_data, {label: \"Reference Group\"}, {value: 'thin'}\n)\n\nviewof stratified_by = Inputs.radio(\n  [\"probability_threshold\", \"ppcr\"], {value: \"probability_threshold\", label: \"Stratified By\"}\n)\n\nviewof censored_assumption = Inputs.radio(\n  [\"excluded\", \"adjusted\"], {value: \"excluded\", label: \"Censored Assumption\"}\n)\n\nviewof competing_assumption = Inputs.radio(\n  [\"excluded\", \"adjusted_as_negative\", \"adjusted_as_censored\", \"reals\"], {value: \"excluded\", label: \"Competing Assumption\"}\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfiltered = transpose(data).filter(function(subset) {\n\n  return time_horizon == subset.fixed_time_horizon &&\n         censored_assumption == subset.censoring_assumption &&\n         competing_assumption == subset.competing_assumption &&\n         stratified_by === subset.stratified_by && \n         reference_group === subset.reference_group;\n})\n\nfiltered\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n  marks: [\n    Plot.barY(filtered, { \n      x: \"strata\", \n      y: \"reals_estimate\", \n      fill: \"reals\", \n      tip: true \n    })\n  ],\n  color: {\n    domain: [\"real_positives\", \"real_competing\", \"real_negatives\", \"real_censored\"], \n    range: [\"#009e73\", \"#9DB4C0\", \"#FAC8CD\", \"#E3F09B\"],\n    legend: true\n  }\n})"
  },
  {
    "objectID": "reference/plot_roc_curve.html",
    "href": "reference/plot_roc_curve.html",
    "title": "plot_roc_curve",
    "section": "",
    "text": "plot_roc_curve\nplot_roc_curve(\n    performance_data,\n    size=None,\n    color_values=None,\n    url_api='http://localhost:4242/',\n)\nPlot ROC Curve\nArgs: performance_data (DataFrame): description size (Optional[int], optional): description. Defaults to None. color_values (List[str], optional): description. Defaults to None. url_api (type, optional): description. Defaults to “http://localhost:4242/”.\nReturns: Figure: description",
    "crumbs": [
      "Discrimination",
      "plot_roc_curve"
    ]
  },
  {
    "objectID": "reference/plot_lift_curve.html",
    "href": "reference/plot_lift_curve.html",
    "title": "plot_lift_curve",
    "section": "",
    "text": "plot_lift_curve\nplot_lift_curve(\n    performance_data,\n    size=None,\n    color_values=None,\n    url_api='http://localhost:4242/',\n)\nPlot Lift Curve\nArgs: performance_data (DataFrame): description size (Optional[int], optional): description. Defaults to None. color_values (List[str], optional): description. Defaults to None. url_api (type, optional): description. Defaults to “http://localhost:4242/”.\nReturns: Figure: description",
    "crumbs": [
      "Discrimination",
      "plot_lift_curve"
    ]
  },
  {
    "objectID": "reference/plot_decision_curve.html",
    "href": "reference/plot_decision_curve.html",
    "title": "plot_decision_curve",
    "section": "",
    "text": "plot_decision_curve\nplot_decision_curve(\n    performance_data,\n    decision_type,\n    min_p_threshold=0,\n    max_p_threshold=1,\n    size=None,\n    color_values=None,\n    url_api='http://localhost:4242/',\n)\nPlot Decision Curve\nArgs: performance_data (DataFrame): description decision_type (str): description min_p_threshold (int, optional): description. Defaults to 0. max_p_threshold (int, optional): description. Defaults to 1. size (Optional[int], optional): description. Defaults to None. color_values (List[str], optional): description. Defaults to None. url_api (type, optional): description. Defaults to “http://localhost:4242/”.\nReturns: Figure: description",
    "crumbs": [
      "Utility",
      "plot_decision_curve"
    ]
  },
  {
    "objectID": "reference/create_roc_curve.html",
    "href": "reference/create_roc_curve.html",
    "title": "create_roc_curve",
    "section": "",
    "text": "create_roc_curve\ncreate_roc_curve(\n    probs,\n    reals,\n    by=0.01,\n    stratified_by='probability_threshold',\n    size=None,\n    color_values=None,\n    url_api='http://localhost:4242/',\n)\nCreate ROC Curve\nArgs: probs (Dict[str, List[float]]): description reals (Dict[str, List[int]]): description by (float, optional): description. Defaults to 0.01. stratified_by (str, optional): description. Defaults to “probability_threshold”. size (Optional[int], optional): description. Defaults to None. color_values (List[str], optional): description. Defaults to None. url_api (type, optional): description. Defaults to “http://localhost:4242/”.\nReturns: Figure: description",
    "crumbs": [
      "Discrimination",
      "create_roc_curve"
    ]
  },
  {
    "objectID": "reference/create_lift_curve.html",
    "href": "reference/create_lift_curve.html",
    "title": "create_lift_curve",
    "section": "",
    "text": "create_lift_curve\ncreate_lift_curve(\n    probs,\n    reals,\n    by=0.01,\n    stratified_by='probability_threshold',\n    size=None,\n    color_values=None,\n    url_api='http://localhost:4242/',\n)\nCreate Lift Curve\nArgs: probs (Dict[str, List[float]]): description reals (Dict[str, List[int]]): description by (float, optional): description. Defaults to 0.01. stratified_by (str, optional): description. Defaults to “probability_threshold”. size (Optional[int], optional): description. Defaults to None. color_values (List[str], optional): description. Defaults to None. url_api (type, optional): description. Defaults to “http://localhost:4242/”.\nReturns: Figure: description",
    "crumbs": [
      "Discrimination",
      "create_lift_curve"
    ]
  },
  {
    "objectID": "reference/create_decision_curve.html",
    "href": "reference/create_decision_curve.html",
    "title": "create_decision_curve",
    "section": "",
    "text": "create_decision_curve\ncreate_decision_curve(\n    probs,\n    reals,\n    decision_type='conventional',\n    min_p_threshold=0,\n    max_p_threshold=1,\n    by=0.01,\n    stratified_by='probability_threshold',\n    size=None,\n    color_values=None,\n    url_api='http://localhost:4242/',\n)\nCreate Decision Curve\nArgs: probs (Dict[str, List[float]]): description reals (Dict[str, List[int]]): description decision_type (str, optional): description. Defaults to “conventional”. min_p_threshold (float, optional): description. Defaults to 0. max_p_threshold (float, optional): description. Defaults to 1. by (float, optional): description. Defaults to 0.01. stratified_by (str, optional): description. Defaults to “probability_threshold”. size (Optional[int], optional): description. Defaults to None. color_values (List[str], optional): description. Defaults to None. url_api (type, optional): description. Defaults to “http://localhost:4242/”.\nReturns: Figure: description",
    "crumbs": [
      "Utility",
      "create_decision_curve"
    ]
  },
  {
    "objectID": "example.html",
    "href": "example.html",
    "title": "Example usage",
    "section": "",
    "text": "To use rtichoke in a project:\n\nimport rtichoke\n\nprint(rtichoke.__version__)\n\n\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 import rtichoke\n      3 print(rtichoke.__version__)\n\nModuleNotFoundError: No module named 'rtichoke'\n\n\n\n\nfrom sklearn.linear_model import LogisticRegression\nimport numpy as np\n\nlr = LogisticRegression()\nx = np.arange(10).reshape(-1, 1)\ny = np.array([0, 1, 0, 0, 1, 1, 1, 0, 0, 1])\n\nx_test = np.arange(7).reshape(-1, 1)\ny_test = np.array([1, 0, 1, 0, 1, 0, 0])\n\nmodel = LogisticRegression(solver=\"liblinear\", random_state=0)\nlasso = LogisticRegression(solver=\"liblinear\", penalty=\"l1\", random_state=0)\n\nmodel.fit(x, y)\nlasso.fit(x_test, y_test)\n\nprobs_dict_for_examples = {\n    \"One Model\": {\"Logistic Regression\": model.predict_proba(x)[:, 1].tolist()},\n    \"Multiple Models\": {\n        \"Logistic Regression\": model.predict_proba(x)[:, 1].tolist(),\n        \"Lasso\": lasso.predict_proba(x)[:, 1].tolist(),\n    },\n    \"Multiple Populations\": {\n        \"Train\": model.predict_proba(x)[:, 1].tolist(),\n        \"Test\": model.predict_proba(x_test)[:, 1].tolist(),\n    },\n}\n\nreals_dict_for_examples = {\n    \"One Model\": {\"Logistic Regression\": y.tolist()},\n    \"Multiple Models\": {\"Reals\": y.tolist()},\n    \"Multiple Populations\": {\"Train\": y.tolist(), \"Test\": y_test.tolist()},\n}\n\n\nperformance_datas = [\n    rtichoke.prepare_performance_data(\n        probs=probs_dict_for_examples[x],\n        reals=reals_dict_for_examples[x],\n        stratified_by=stratified_by,\n        url_api=\"http://127.0.0.1:7644/\",\n    )\n    for x in probs_dict_for_examples.keys()\n    for stratified_by in [\"probability_threshold\", \"ppcr\"]\n]\n\nperformance_datas[0]\n\ndict_keys(['probability_threshold', 'TP', 'TN', 'FN', 'FP', 'sensitivity', 'FPR', 'specificity', 'PPV', 'NPV', 'lift', 'predicted_positives', 'NB', 'ppcr'])\ndict_keys(['probability_threshold', 'ppcr', 'TP', 'TN', 'FN', 'FP', 'sensitivity', 'FPR', 'specificity', 'PPV', 'NPV', 'lift', 'predicted_positives'])\ndict_keys(['model', 'probability_threshold', 'TP', 'TN', 'FN', 'FP', 'sensitivity', 'FPR', 'specificity', 'PPV', 'NPV', 'lift', 'predicted_positives', 'NB', 'ppcr'])\ndict_keys(['model', 'probability_threshold', 'ppcr', 'TP', 'TN', 'FN', 'FP', 'sensitivity', 'FPR', 'specificity', 'PPV', 'NPV', 'lift', 'predicted_positives'])\ndict_keys(['population', 'probability_threshold', 'TP', 'TN', 'FN', 'FP', 'sensitivity', 'FPR', 'specificity', 'PPV', 'NPV', 'lift', 'predicted_positives', 'NB', 'ppcr'])\ndict_keys(['population', 'probability_threshold', 'ppcr', 'TP', 'TN', 'FN', 'FP', 'sensitivity', 'FPR', 'specificity', 'PPV', 'NPV', 'lift', 'predicted_positives'])\n\n\n\n\n\n\n\n\n\nprobability_threshold\nTP\nTN\nFN\nFP\nsensitivity\nFPR\nspecificity\nPPV\nNPV\nlift\npredicted_positives\nNB\nppcr\n\n\n\n\n0\n0.00\n5\n0\n0\n5\n1.0\n1.0\n0.0\n0.5\nNaN\n1.0\n10\n0.5000\n1.0\n\n\n1\n0.01\n5\n0\n0\n5\n1.0\n1.0\n0.0\n0.5\nNaN\n1.0\n10\n0.4949\n1.0\n\n\n2\n0.02\n5\n0\n0\n5\n1.0\n1.0\n0.0\n0.5\nNaN\n1.0\n10\n0.4898\n1.0\n\n\n3\n0.03\n5\n0\n0\n5\n1.0\n1.0\n0.0\n0.5\nNaN\n1.0\n10\n0.4845\n1.0\n\n\n4\n0.04\n5\n0\n0\n5\n1.0\n1.0\n0.0\n0.5\nNaN\n1.0\n10\n0.4792\n1.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n96\n0.96\n0\n5\n5\n0\n0.0\n0.0\n1.0\nNaN\n0.5\nNaN\n0\n0.0000\n0.0\n\n\n97\n0.97\n0\n5\n5\n0\n0.0\n0.0\n1.0\nNaN\n0.5\nNaN\n0\n0.0000\n0.0\n\n\n98\n0.98\n0\n5\n5\n0\n0.0\n0.0\n1.0\nNaN\n0.5\nNaN\n0\n0.0000\n0.0\n\n\n99\n0.99\n0\n5\n5\n0\n0.0\n0.0\n1.0\nNaN\n0.5\nNaN\n0\n0.0000\n0.0\n\n\n100\n1.00\n0\n5\n5\n0\n0.0\n0.0\n1.0\nNaN\n0.5\nNaN\n0\nNaN\n0.0\n\n\n\n\n101 rows × 14 columns\n\n\n\n\nroc_curves = [\n    rtichoke.create_roc_curve(\n        probs=probs_dict_for_examples[x],\n        reals=reals_dict_for_examples[x],\n        size=600,\n        stratified_by=stratified_by,\n        url_api=\"http://127.0.0.1:7644/\",\n    )\n    for x in probs_dict_for_examples.keys()\n    for stratified_by in [\"probability_threshold\", \"ppcr\"]\n]\n\n# roc_curves[0].show(config={'displayModeBar': False})\n# roc_curves[1].show(config={'displayModeBar': False})\n# roc_curves[2].show(config={'displayModeBar': False})\n# roc_curves[3].show(config={'displayModeBar': False})\nroc_curves[4].show(config={\"displayModeBar\": False})\n# roc_curves[5].show(config={'displayModeBar': False})"
  },
  {
    "objectID": "before_we_validate.html",
    "href": "before_we_validate.html",
    "title": "Before we Validate Performance",
    "section": "",
    "text": "Ideally we would like to keep Performance Validation as agnostic as possible. However, the structure of the validation set (probs, reals and times) implies the nature of the related assumptions and the required use case.\nSo before we validate performance, let us consider the underlying process.\nThe User Inputs ✍️"
  },
  {
    "objectID": "before_we_validate.html#declare-heuristics-regarding-censored-events",
    "href": "before_we_validate.html#declare-heuristics-regarding-censored-events",
    "title": "Before we Validate Performance",
    "section": "✍️ Declare Heuristics Regarding Censored Events 📅🤬",
    "text": "✍️ Declare Heuristics Regarding Censored Events 📅🤬\n\n\n\n\n\ngraph LR\n    S0[\"Non Event&lt;br&gt;0 🤨 / 🤬\"] --&gt;|\"?\"|S1[\"Primary Event&lt;br&gt;1 🤢\"]\n    S0--&gt;|\"?\"|S2[\"Competing Event&lt;br&gt;2 💀\"]\n\n    \n    classDef nonEvent fill:#E0E0E0,stroke:#333,stroke-width:1px,color:black\n    classDef primaryEvent fill:#808080,stroke:#333,stroke-width:1px,color:white\n    classDef competingEvent fill:#9DB4C0,stroke:#333,stroke-width:1px,color:black\n    \n    class S0 nonEvent\n    class S1 primaryEvent\n    class S2 competingEvent\n    class S3 censoredEvent\n\n    linkStyle 0 stroke:#333,background:yellow\n\n\n\n\n\n\n\nThe censored_heuristic argument is designed for the user to choose how interpret censored events.\nPerformance Validation in the face of censored observations require assumptions regarding the unobserved followup.\nTODO: add link to nan-van-geloven article\n\nExclude Censored Events\n\n\n\n\n\ngraph LR\n    S0[\"Non Event&lt;br&gt;0 🤨\"] --&gt;S1[\"Primary Event&lt;br&gt;1 🤢\"]\n    S0--&gt;S2[\"Competing Event&lt;br&gt;2 💀\"]\n\n     S3[\"Censored&lt;br&gt;0 🤬\"]\n\n    \n    classDef nonEvent fill:#E0E0E0,stroke:#333,stroke-width:1px,color:black\n    classDef primaryEvent fill:#808080,stroke:#333,stroke-width:1px,color:white\n    classDef censoredEvent fill:#E3F09B,stroke:#333,stroke-width:1px,color:black\n    classDef competingEvent fill:#9DB4C0,stroke:#333,stroke-width:1px,color:black\n    \n    class S0 nonEvent\n    class S1 primaryEvent\n    class S2 competingEvent\n    class S3 censoredEvent\n\n    linkStyle 0 stroke:#333,background:yellow\n\n\n\n\n\n\n\nAll censored events to be excluded.\nUnderlying Assumption: Small amount of censored events. Violation of the assumption leads to: Overestimation of the observed outcomes.\n\n\nAdjust Censored as partially seen Non-Event\nObserved outcomes for each strata are estimated using the AJ-estimate (equivalent to CIF and KM): Each censored observation is assumed to be similar to the ones who weren’t censored.\nTODO: Link to article\nUnderlying Assumption: Independent Censoring. Violation of the assumption leads to: Biased estimate for observed outcomes."
  },
  {
    "objectID": "before_we_validate.html#render-predictions-histogram",
    "href": "before_we_validate.html#render-predictions-histogram",
    "title": "Before we Validate Performance",
    "section": "Render Predictions Histogram",
    "text": "Render Predictions Histogram\n\nExtract AJ Estimate by Assumptions\nFor each requried combination of reference_group x predictions_strata x fixed_time_horizons x censored_heuristic x competing_heuristic a separate AJ estimated is calculated for the adjusted reals and a Crude estimate is calculated for the excluded reals.\nThe sum of the AJ estimates for each predictions_strata is equal to the overal AJ estimate."
  },
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "rtichoke",
    "section": "",
    "text": "rpepmgeqz ../CONTRIBUTING.md"
  },
  {
    "objectID": "reference/create_calibration_curve.html",
    "href": "reference/create_calibration_curve.html",
    "title": "create_calibration_curve",
    "section": "",
    "text": "create_calibration_curve\ncreate_calibration_curve(\n    probs,\n    reals,\n    calibration_type='discrete',\n    size=None,\n    color_values=None,\n    url_api='http://localhost:4242/',\n)\nCreates Calibration Curve\nArgs: probs (Dict[str, List[float]]): description reals (Dict[str, List[int]]): description calibration_type (str, optional): description. Defaults to “discrete”. size (Optional[int], optional): description. Defaults to None. color_values (List[str], optional): description. Defaults to None. url_api (type, optional): description. Defaults to “http://localhost:4242/”.\nReturns: Figure: description",
    "crumbs": [
      "Calibration",
      "create_calibration_curve"
    ]
  },
  {
    "objectID": "reference/create_gains_curve.html",
    "href": "reference/create_gains_curve.html",
    "title": "create_gains_curve",
    "section": "",
    "text": "create_gains_curve\ncreate_gains_curve(\n    probs,\n    reals,\n    by=0.01,\n    stratified_by='probability_threshold',\n    size=None,\n    color_values=None,\n    url_api='http://localhost:4242/',\n)\nCreate Gains Curve\nArgs: probs (Dict[str, List[float]]): description reals (Dict[str, List[int]]): description by (float, optional): description. Defaults to 0.01. stratified_by (str, optional): description. Defaults to “probability_threshold”. size (Optional[int], optional): description. Defaults to None. color_values (List[str], optional): description. Defaults to None. url_api (type, optional): description. Defaults to “http://localhost:4242/”.\nReturns: Figure: description",
    "crumbs": [
      "Discrimination",
      "create_gains_curve"
    ]
  },
  {
    "objectID": "reference/create_precision_recall_curve.html",
    "href": "reference/create_precision_recall_curve.html",
    "title": "create_precision_recall_curve",
    "section": "",
    "text": "create_precision_recall_curve\ncreate_precision_recall_curve(\n    probs,\n    reals,\n    by=0.01,\n    stratified_by='probability_threshold',\n    size=None,\n    color_values=None,\n    url_api='http://localhost:4242/',\n)\nCreate Precision Recall Curve\nArgs: probs (Dict[str, List[float]]): description reals (Dict[str, List[int]]): description by (float, optional): description. Defaults to 0.01. stratified_by (str, optional): description. Defaults to “probability_threshold”. size (Optional[int], optional): description. Defaults to None. color_values (List[str], optional): description. Defaults to None. url_api (type, optional): description. Defaults to “http://localhost:4242/”.\nReturns: Figure: description",
    "crumbs": [
      "Discrimination",
      "create_precision_recall_curve"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Functions for Calibration.\n\n\n\ncreate_calibration_curve\nCreates Calibration Curve\n\n\n\n\n\n\nFunctions for Discrimination.\n\n\n\ncreate_roc_curve\nCreate ROC Curve\n\n\ncreate_precision_recall_curve\nCreate Precision Recall Curve\n\n\ncreate_gains_curve\nCreate Gains Curve\n\n\ncreate_lift_curve\nCreate Lift Curve\n\n\nplot_roc_curve\nPlot ROC Curve\n\n\nplot_precision_recall_curve\nPlot Precision Recall Curve\n\n\nplot_gains_curve\nPlot Gains Curve\n\n\nplot_lift_curve\nPlot Lift Curve\n\n\n\n\n\n\nFunctions for Utility.\n\n\n\ncreate_decision_curve\nCreate Decision Curve\n\n\nplot_decision_curve\nPlot Decision Curve",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#calibration",
    "href": "reference/index.html#calibration",
    "title": "Function reference",
    "section": "",
    "text": "Functions for Calibration.\n\n\n\ncreate_calibration_curve\nCreates Calibration Curve",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#discrimination",
    "href": "reference/index.html#discrimination",
    "title": "Function reference",
    "section": "",
    "text": "Functions for Discrimination.\n\n\n\ncreate_roc_curve\nCreate ROC Curve\n\n\ncreate_precision_recall_curve\nCreate Precision Recall Curve\n\n\ncreate_gains_curve\nCreate Gains Curve\n\n\ncreate_lift_curve\nCreate Lift Curve\n\n\nplot_roc_curve\nPlot ROC Curve\n\n\nplot_precision_recall_curve\nPlot Precision Recall Curve\n\n\nplot_gains_curve\nPlot Gains Curve\n\n\nplot_lift_curve\nPlot Lift Curve",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#utility",
    "href": "reference/index.html#utility",
    "title": "Function reference",
    "section": "",
    "text": "Functions for Utility.\n\n\n\ncreate_decision_curve\nCreate Decision Curve\n\n\nplot_decision_curve\nPlot Decision Curve",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/plot_gains_curve.html",
    "href": "reference/plot_gains_curve.html",
    "title": "plot_gains_curve",
    "section": "",
    "text": "plot_gains_curve\nplot_gains_curve(\n    performance_data,\n    size=None,\n    color_values=None,\n    url_api='http://localhost:4242/',\n)\nPlot Gains Curve\nArgs: performance_data (DataFrame): description size (Optional[int], optional): description. Defaults to None. color_values (List[str], optional): description. Defaults to None. url_api (type, optional): description. Defaults to “http://localhost:4242/”.\nReturns: Figure: description",
    "crumbs": [
      "Discrimination",
      "plot_gains_curve"
    ]
  },
  {
    "objectID": "reference/plot_precision_recall_curve.html",
    "href": "reference/plot_precision_recall_curve.html",
    "title": "plot_precision_recall_curve",
    "section": "",
    "text": "plot_precision_recall_curve\nplot_precision_recall_curve(\n    performance_data,\n    size=None,\n    color_values=None,\n    url_api='http://localhost:4242/',\n)\nPlot Precision Recall Curve\nArgs: performance_data (DataFrame): description size (Optional[int], optional): description. Defaults to None. color_values (List[str], optional): description. Defaults to None. url_api (type, optional): description. Defaults to “http://localhost:4242/”.\nReturns: Figure: description",
    "crumbs": [
      "Discrimination",
      "plot_precision_recall_curve"
    ]
  },
  {
    "objectID": "reference/rtichoke.html",
    "href": "reference/rtichoke.html",
    "title": "rtichoke",
    "section": "",
    "text": "rtichoke\nrtichoke"
  }
]